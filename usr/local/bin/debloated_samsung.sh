#!/usr/bin/env bash
#
# Autor:       Fernando Souza - https://www.youtube.com/@fernandosuporte/
# Colabora√ß√£o: Slackjeff      - https://github.com/slackjeff/
# Data:        04/08/2025 as 14:38:36
# Homepage:    https://github.com/tuxslack/debloated_Samsung
# Licen√ßa:     MIT
#
#
###########################################################################
#
# Adjust for Linux Distribuitions.
#
# THKS! Fork: https://github.com/invinciblevenom/debloat_samsung_android
#
###########################################################################


# Ajuda


# ‚úÖ Como ativar o modo desenvolvedor no Android 5.1.1:


#     Abra o menu "Configura√ß√µes" (√≠cone de engrenagem).

#     Role at√© o final e toque em "Sobre o dispositivo".

#     Encontre e toque repetidamente em "N√∫mero da vers√£o" (ou "Build number") 7 vezes.

#         Uma contagem vai aparecer como: "Faltam X passos para se tornar um desenvolvedor".

#         Ao final, aparecer√°: "Agora voc√™ √© um desenvolvedor!"

#     Volte √† tela principal das Configura√ß√µes.

#     Voc√™ ver√° um novo item: "Op√ß√µes do desenvolvedor".



# üîß (Opcional) Como ativar a Depura√ß√£o USB:


# Se voc√™ precisa usar o celular com um cabo USB para fins t√©cnicos (como root, 
# comandos ADB, ou Odin):

#     V√° em Configura√ß√µes > Op√ß√µes do desenvolvedor.

#     Ative a op√ß√£o "Depura√ß√£o USB".




# https://www.youtube.com/watch?v=WidiAp-2Aag
# https://github.com/invinciblevenom/debloat_samsung_android



clear

# ----------------------------------------------------------------------------------------

# Uso de cores para destacar

RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'
RESET='\033[0m'

# ----------------------------------------------------------------------------------------

# Captura Ctrl+C e exibe mensagem amig√°vel

# Ela captura o sinal SIGINT, que √© enviado quando o usu√°rio pressiona Ctrl+C, e executa 
# o trecho entre aspas:

# trap 'echo -e "\n${YELLOW}Saindo...${RESET}"; exit 0' SIGINT

trap 'echo -e "\n${YELLOW}Saindo... Limpando arquivos tempor√°rios.${RESET}"; rm -f /tmp/debloat_*.log; exit 0' SIGINT


# Assim, o script encerra de forma controlada, com uma mensagem limpa em vez de um 
# encerramento abrupto.

# ----------------------------------------------------------------------------------------

rm -Rf /tmp/debloat_*.log

# Habilita log de sa√≠da para arquivo

LOGFILE="debloat_$(date +%F_%H%M%S).log"

exec > >(tee -a "/tmp/$LOGFILE") 2>&1

# Exibe onde o log est√° sendo salvo

echo -e "\n\nüìÑ Log ser√° salvo em: ${GREEN}/tmp/$LOGFILE \n${RESET}"


# Lista de pacote instalados

lista_de_pacotes="/tmp/listar-aplicativos.txt"

# ----------------------------------------------------------------------------------------

######## Functions

# Mensagem de erro

function DIE() {

    echo -e "${RED}\nERRO: $* \n ${RESET}" >&2
    
    sleep 5

    exit 1

}

# Obs: A defini√ß√£o da fun√ß√£o DIE deve esta sempre no in√≠cio do script, antes de qualquer chamada a ela.

# ----------------------------------------------------------------------------------------


# Detecta vers√£o do Android via ADB

android_version=$(adb shell getprop ro.build.version.release | tr -d '\r')

echo -e "\nVers√£o do Android detectada: $android_version\n"


# Extrai a parte principal da vers√£o (antes do primeiro ponto) Ex: 5 de 5.1.1.

android_major_version=${android_version%%.*}


# Verifica se √© uma vers√£o num√©rica v√°lida

if [[ "$android_major_version" =~ ^[0-9]+$ ]]; then

    # Garante que a compara√ß√£o seja num√©rica.

    if (( android_major_version < 6 )); then

        echo -e "${RED}‚ö†Ô∏è  ATEN√á√ÉO: Esta √© a vers√£o Android ${android_version}. ${RESET}"
        echo -e "${RED}O comando 'cmd' N√ÉO est√° dispon√≠vel nessa vers√£o. ${RESET}"
        echo -e "${RED}Comandos como 'cmd package install-existing' N√ÉO funcionar√£o. ${RESET}\n"

    else

        echo -e "${GREEN}‚úîÔ∏è  Android ${android_version} detectado. O comando 'cmd' est√° dispon√≠vel. ${RESET}\n"

        sleep 5

    fi


else

    clear

    echo -e "\n${RED}Erro: n√£o foi poss√≠vel determinar corretamente a vers√£o do Android. ${RESET} \n"

    sleep 10

    exit 1

fi


# ----------------------------------------------------------------------------------------


echo -e "${GREEN}Tudo pronto para come√ßar! ${RESET} \n"

echo -e "${RED}‚ö†Ô∏è Use por sua conta e risco! ${RESET}"


echo -e "${RED}
=== Iniciando desbloat de apps legados Samsung ===

Para remover bloatware de aparelhos Samsung com Android 

‚ö†Ô∏è ATEN√á√ÉO

    Isso n√£o desinstala completamente os apps, apenas os desativa/removes para o usu√°rio atual (pm uninstall --user 0).

    Alguns apps s√£o importantes para funcionalidades b√°sicas. Use com cuidado.

    Este script deve ser executado com o dispositivo conectado via USB, com a depura√ß√£o USB ativada e com o ADB configurado no seu sistema.
    

    √â necess√°rio ter o adb (android-tools) instalado em sua distribui√ß√£o Linux.

    Op√ß√£o do desenvolvedor [HABILITADO em seu celular]



üîÅ Reverter mudan√ßas?

Use:

adb shell cmd package install-existing com.nome.do.pacote


‚ö†Ô∏è  Cuidados:

    Remo√ß√£o com root pode invalidar a garantia.

    Modificar arquivos de sistema pode causar bootloop se feito incorretamente.

    Recomenda-se backup completo antes.


Enter para continuar...

${RESET}"

read pausa

clear

# ----------------------------------------------------------------------------------------

######## Check

if ! command -v adb >/dev/null 2>&1; then

    echo -e "${RED}\nErro. Instale o adb (android-tools).\n ${RESET}"
    
    sleep 5

    exit 1
    
else

# ----------------------------------------------------------------------------------------

# Verifique se o ADB est√° realmente funcionando:

adb version >/dev/null 2>&1 || DIE "ADB n√£o est√° funcionando corretamente."

# ----------------------------------------------------------------------------------------

 # Verificar permiss√£o do ADB

 # Antes de qualquer a√ß√£o com o ADB, adicione:

 adb devices | grep -q "unauthorized" && \
  DIE "Dispositivo n√£o autorizado. Autorize o dispositivo na tela do seu celular."
  
# ----------------------------------------------------------------------------------------

  
    # Start server.
    
    adb start-server
    
fi

# ----------------------------------------------------------------------------------------

# üìÅ Organiza√ß√£o de Arquivos

# Checar exist√™ncia da pasta conf/

# Antes de qualquer fun√ß√£o:

[[ -d "/etc/debloated_Samsung/" ]] || { DIE "Pasta '/etc/debloated_Samsung/' n√£o encontrada." && exit ; } 

# ----------------------------------------------------------------------------------------


    echo -e "\n+---------------------------------------------+"

    # Conectando via ADB...

    echo -e "${GREEN}\nChecando os dispositivos conectados...\n ${RESET}"

# Para v√°rios dispositivos conectados via ADB com o status device.

output=$(adb devices | tail -n +2 | grep -w "device" | awk '{print $1}')

# ‚úÖ O que exatamente esse c√≥digo faz:

#     adb devices: lista todos os dispositivos.

#     tail -n +2: remove a primeira linha (List of devices attached).

#     grep -w "device": filtra apenas os dispositivos com status "device" (ou seja, conectados e autorizados).

#     awk '{print $1}': extrai apenas o ID do dispositivo.

# Ent√£o, se houver 1 ou mais dispositivos conectados corretamente, output ter√° uma lista 
# separada por quebras de linha, como:

# emulator-5554
# R58M65XXXX

if [ -z "$output" ]; then

    # echo "‚ùå Nenhum dispositivo ADB conectado com status 'device'."

    echo -e "${RED}\nN√£o encontrei nenhum dispositivo. Plugue seu celular no computador. \n ${RESET}"
    
    echo -e "+---------------------------------------------+ \n"
    
    sleep 30

    exit 1
fi


echo -e "${GREEN}\nüì± Dispositivo(s) conectado(s): ${RESET}\n"

echo "$output"

echo -e "\n+---------------------------------------------+\n"


# ----------------------------------------------------------------------------------------

# Para listar todos os pacotes instalados:

function lista(){

    clear

    rm "$lista_de_pacotes" 1> /dev/null 2> /dev/null


echo "
Arquivo gerado em: $(date +%d/%m/%Y_%H-%M-%S)

" > "$lista_de_pacotes"

echo "

===== INFORMA√á√ïES DO DISPOSITIVO ANDROID =====



" | tee -a "$lista_de_pacotes"


# Informa√ß√µes b√°sicas

echo -e "Fabricante:\t\t$(adb shell getprop ro.product.manufacturer  | tr -d '\r')"  | tee -a "$lista_de_pacotes"
echo -e "Modelo:\t\t\t$(adb shell getprop ro.product.model         | tr -d '\r')"  | tee -a "$lista_de_pacotes"
echo -e "Vers√£o do Android:\t$(adb shell getprop ro.build.version.release | tr -d '\r')"  | tee -a "$lista_de_pacotes"
echo -e "N√∫mero da Build:\t$(adb shell getprop ro.build.display.id      | tr -d '\r')"  | tee -a "$lista_de_pacotes"


echo -e "Arquitetura CPU:\t$(adb shell getprop ro.product.cpu.abi       | tr -d '\r')"  | tee -a "$lista_de_pacotes"

cpu_list=$(adb shell getprop ro.product.cpu.abilist          | tr -d '\r')

echo -e "CPU / ABI:\t\t$cpu_list"  | tee -a "$lista_de_pacotes"

echo -e "Nome do Dispositivo:\t$(adb shell getprop ro.product.device        | tr -d '\r')"  | tee -a "$lista_de_pacotes"
echo -e "Nome do Produto:\t$(adb shell getprop ro.product.name          | tr -d '\r')"  | tee -a "$lista_de_pacotes"



echo -e "Plataforma:\t\t$(adb shell getprop ro.board.platform          | tr -d '\r')"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

low_ram=$(adb shell getprop ro.config.low_ram)

ram=$( [ "$low_ram" = "true" ] && echo "Baixa (provavelmente 512 MB ou 1 GB)" || echo "Normal" )

echo -e "RAM:\t\t\t$ram"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

storage=$(adb shell getprop storage.mmc.size)

# Formatando armazenamento

if [[ "$storage" =~ ^[0-9]+$ ]]; then

    armazenamento_gb=$(echo "scale=2; $storage/1073741824" | bc)

    armazenamento="${armazenamento_gb} GB"

else

    armazenamento="Desconhecido"

fi

echo -e "Armazenamento:\t\t$armazenamento"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

sim1_state=$(adb shell getprop ril.sim1.absent)
sim2_state=$(adb shell getprop ril.sim2.present)

# Status dos SIMs

[ "$sim1_state" = "1" ] && sim1="Ausente"  || sim1="Presente"
[ "$sim2_state" = "0" ] && sim2="Presente" || sim2="Ausente"

echo -e "Dual SIM:\t\tSIM1: $sim1 | SIM2: $sim2"  | tee -a "$lista_de_pacotes"


# ----------------------------------------------------------------------------------------

idioma=$(adb shell getprop persist.sys.language          | tr -d '\r')
pais=$(adb shell getprop persist.sys.country             | tr -d '\r')

echo -e "Idioma/Sistema:\t\t${idioma}-${pais}"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

bootloader=$(adb shell getprop ro.bootloader | tr -d '\r')

echo -e "Bootloader:\t\t$bootloader"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

baseband=$(adb shell getprop gsm.version.baseband       | tr -d '\r')

echo -e "Baseband:\t\t$baseband"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

patch_seguranca=$(adb shell getprop ro.build.version.security_patch       | tr -d '\r')

echo -e "Security Patch:\t\t$patch_seguranca"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

knox_vpn=$(adb shell getprop net.knoxvpn.version | tr -d '\r')
knox_sso=$(adb shell getprop net.knoxsso.version | tr -d '\r')
knox_ativo=$(adb shell getprop dev.knoxapp.running | tr -d '\r')

echo -e "Knox:\t\t\tVers√£o VPN: $knox_vpn | SSO: $knox_sso | Ativo: $knox_ativo"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

csc=$(adb shell getprop ro.csc.sales_code | tr -d '\r')

echo -e "CSC (regi√£o):\t\t$csc"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

timezone=$(adb shell getprop persist.sys.timezone | tr -d '\r')

echo -e "Fuso Hor√°rio:\t\t$timezone"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

usb_config=$(adb shell getprop persist.sys.usb.config | tr -d '\r')

echo -e "Configura√ß√£o USB:\t$usb_config"  | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------


build_date=$(adb shell getprop ro.build.date | tr -d '\r')

echo -e "Data da Build:\t\t$build_date" | tee -a "$lista_de_pacotes"


# ----------------------------------------------------------------------------------------

# Se o comando anterior falhar, usa o getprop como fallback.

serial=$(adb get-serialno 2>/dev/null | tr -d '\r')

# Se serial estiver vazio ou for "unknown", usa o getprop

if [ -z "$serial" ] || [ "$serial" = "unknown" ]; then

    serial=$(adb shell getprop ro.serialno 2>/dev/null | tr -d '\r')

fi

echo -e "N√∫mero de s√©rie:\t$serial" | tee -a "$lista_de_pacotes"

# ----------------------------------------------------------------------------------------

echo -e "\nTotal de pacotes:\t$(adb shell pm list packages | wc -l)"            | tee -a "$lista_de_pacotes"

echo "
# -------------------------------------------------------------------------
" | tee -a $lista_de_pacotes

sleep 1


    echo -e "${YELLOW}\nPacotes instalados atualmente: \n${RESET}"

    echo -e "\nPacotes instalados atualmente: \n" >> "$lista_de_pacotes"

    adb shell pm list packages | tee -a "$lista_de_pacotes"

    echo -e "\n# -------------------------------------------------------------------------\n"


    echo -e "\n${GREEN}‚úÖ Informa√ß√µes salvas em: $lista_de_pacotes ${RESET}\n"

    echo -e "\n${RED}Enter para voltar ao menu principal... ${RESET}\n"
    read pausa



# ‚úÖ Dica Extra

# Se quiser ver todas as propriedades dispon√≠veis, execute:

# adb shell getprop

}


# Ex:

# package:br.com.mobicare.samsung.recarga

# package:com.google.android.music

# package:br.org.sidi.aplicacoesbrasil.widget

# package:com.rsupport.rs.activity.rsupport.aas2


# Depois de encontrar o nome do pacote, use o comando para remove:


# App recarga

# $ adb shell pm uninstall --user 0  br.com.mobicare.samsung.recarga
# Success


# Google Play M√∫sica (nome do pacote: com.google.android.music) era o servi√ßo oficial de 
# streaming de m√∫sica do Google, descontinuado em 2020 e substitu√≠do pelo YouTube Music.

# $ adb shell pm uninstall --user 0  com.google.android.music
# Success


# O app Destaques, vers√£o 04.02.17, √© um widget da Samsung.

# Este aplicativo **n√£o √© um app de sistema essencial**, sendo desenvolvido pela 
# Samsung Eletr√¥nica da Amaz√¥nia Ltda para exibir **sugest√µes de apps, promo√ß√µes e 
# not√≠cias** via widget.


# $ adb shell pm uninstall --user 0 br.org.sidi.aplicacoesbrasil.widget
# Success


# Apps Clube

# O pacote **br.com.bemobi.appsclub.samsung** corresponde ao app AppsClub, uma loja 
# alternativa de aplicativos, desenvolvida pela empresa Bemobi, e muitas vezes 
# pr√©-instalada em celulares Samsung vendidos por operadoras (especialmente no Brasil).

# $ adb shell pm list packages | grep -i club
# package:br.com.bemobi.appsclub.samsung


# $ adb shell pm uninstall --user 0 br.com.bemobi.appsclub.samsung
# Success



# Smart Tutor

# O app Smart Tutor, vers√£o 1.5 (por exemplo build 408), √© um servi√ßo oficial da Samsung 
# que permite a assist√™ncia remota por agentes de suporte da Samsung. Ele √© frequentemente 
# instalado automaticamente via o menu de configura√ß√µes "Remote Support" em dispositivos 
# Samsung com Android 11 ou One UI 4


# $ adb shell pm uninstall --user 0 com.rsupport.rs.activity.rsupport.aas2
# Success


# O que √© e como funciona

# Permite que um agente da Samsung acesse seu dispositivo remotamente para diagn√≥sticos, 
# ajustes de configura√ß√µes ou suporte t√©cnico ‚Äî sempre com sua permiss√£o expressa

# Funciona como um "TeamViewer", mas restrito a suporte Samsung, com acesso limitado a 
# dados sens√≠veis

# Muitos usu√°rios relatam que o app aparece automaticamente, especialmente ap√≥s desinstalar 
# o app "Tips" da Samsung, ou em certas regi√µes, sem possibilidade de impedir a instala√ß√£o 
# via interface Android

# V√°rios usu√°rios confirmam que a remo√ß√£o diminui notifica√ß√µes e consumo de recursos, 
# melhorando dura√ß√£o de bateria e desempenho.

# ----------------------------------------------------------------------------------------

# Ajustes Iniciais

function TWEAKS(){

    clear

    local conf_path="/etc/debloated_Samsung/tweaks.conf"
    local conf_fullpath="${conf_path}"
    local command

    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."

    echo -e "${GREEN}\n++++++++ Melhore a Bateria, Performance e desative os Apps GOS. \n ${RESET}"
    
    sleep 1s
    
    while read -r command; do


        # Ignorar linhas vazias e coment√°rios nos arquivos .conf

        # [[ "$command" =~ ^#.*$ || -z "$command" ]] && continue

        [[ -z "$command" || "$command" =~ ^# ]] && continue

    
        echo -e "${GREEN}\n[ADB] Executando: adb shell -n settings put global $command \n ${RESET}"
            
        adb shell -n settings put global "$command"

            
    done < "$conf_fullpath"


# ----------------------------------------------------------------------------------------

     # Para desativar o envio autom√°tico de relat√≥rios de erro de aplicativos no Android.

     echo -e "\n${GREEN}Desativando o envio autom√°tico de relat√≥rios de erro de aplicativos no Android...\n\n[ADB] Executando: adb shell settings put secure send_action_app_error 0 ${RESET}\n"

     adb shell settings put secure send_action_app_error 0



# Finalidade pr√°tica:

# Ao definir send_action_app_error como 0, voc√™ est√° dizendo ao sistema Android para n√£o 
# enviar o broadcast ACTION_APP_ERROR quando um aplicativo falha. Esse broadcast normalmente 
# pode ser usado por apps de diagn√≥stico, como apps de feedback ou captura de logs, para 
# interceptar falhas e gerar relat√≥rios.

# Ent√£o, esse comando √© √∫til, por exemplo:

#    Para desenvolvedores que n√£o querem ver pop-ups de erro enquanto testam.

#    Para evitar que um app de terceiros capture ou registre falhas.

#    Para melhorar a privacidade ou o desempenho (menor sobrecarga ao evitar processos 
# secund√°rios ao ocorrer um erro).

# ----------------------------------------------------------------------------------------

    adb shell settings put secure      game_auto_temperature_control 0



# Tratamento de erro para desabilitar o app GOS (com.samsung.android.game.gos) via ADB


PACKAGE="com.samsung.android.game.gos"

# Verifica se o pacote existe no dispositivo

if adb shell pm list packages | grep -q "$PACKAGE"; then

    echo -e "\nüì¶${GREEN}Desabilitando o aplicativo GOS... ${RESET}\n"


    adb shell pm clear --user 0        "$PACKAGE"

# ‚ùì O que ele faz?

# Esse comando limpa todos os dados do aplicativo $PACKAGE para o usu√°rio 0 
# (usu√°rio principal do dispositivo Android).

# üîç Que tipo de dados s√£o apagados?

#     Dados de cache

#     Prefer√™ncias/configura√ß√µes salvas

#     Dados de login, progresso, etc. (se armazenados localmente)

#     Tudo o que o app armazenou no seu sandbox interno de dados

#     √â como se voc√™ tivesse ido manualmente em:
#     Configura√ß√µes ‚Üí Aplicativos ‚Üí GOS ‚Üí Armazenamento ‚Üí Limpar dados


# ‚ö†Ô∏è Importante

#     N√£o desinstala o app.

#     N√£o desativa o app.

#     Pode causar comportamentos de "primeira execu√ß√£o" (o app pode pedir permiss√µes de 
#     novo ou reiniciar o setup interno).

#     Funciona apenas se o app existir no sistema e estiver instalado para o --user 0.


# ‚úÖ Uso t√≠pico

# Voc√™ usaria esse comando quando quiser:

#     Resetar o app sem desinstalar.

#     Apagar poss√≠veis configura√ß√µes corrompidas.

#     Fazer troubleshooting de apps que est√£o se comportando mal.

#     Reverter comportamentos configurados anteriormente.




    adb shell pm disable-user --user 0 "$PACKAGE" && \
    echo -e "${GREEN}\n‚úÖ Aplicativo GOS desabilitado com sucesso! \n ${RESET}" || \
    echo -e "\n${RED}‚ùå Falha ao desabilitar o aplicativo GOS. ${RESET}\n"

else

    echo -e "\n${YELLOW}‚ö†Ô∏è  O pacote $PACKAGE n√£o est√° presente no dispositivo. Nada a fazer. ${RESET}\n"

fi


# ----------------------------------------------------------------------------------------

    echo -e "${GREEN}\nAjustes Iniciais finalizado com √™xito. \n ${RESET}"

    sleep 5

}


# https://github.com/invinciblevenom/debloat_samsung_android/blob/main/Tweaks.bat

# ----------------------------------------------------------------------------------------

# Limpeza B√°sica

function BASIC() {

    local conf_path="/etc/debloated_Samsung/basic.conf"
    local conf_fullpath="${conf_path}"
    local command

    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."

    echo -e "${YELLOW}\nIniciando remo√ß√£o de bloatware pr√©-instalado...\n${RESET}"

    echo -e "${GREEN}\n+++++++++++++++ Limpeza B√°sica \n ${RESET}"
    
    sleep 1s
    
    while read -r command; do


        # Ignorar linhas vazias e coment√°rios nos arquivos .conf
    
        # [[ "$command" =~ ^#.*$ || -z "$command" ]] && continue

        [[ -z "$command" || "$command" =~ ^# ]] && continue


        # Ignora linhas que come√ßam com # ou cont√™m a palavra 'others'
        
        echo -e "${GREEN}\n[ADB] Executando: adb shell -n pm uninstall --user 0 $command \n ${RESET}"
        

       # Tratamento de erro para capturar a sa√≠da do comando e verificar se houve falha 
       # (por exemplo, porque o pacote n√£o existe no dispositivo).

       output=$(adb shell -n pm uninstall --user 0 "$command" 2>&1)

       if [[ "$output" == *"Failure"* ]]; then

            echo -e "\n${RED}‚ùå Falha ao remover: $command - Motivo: $output${RESET}\n"

       else

            echo -e "\n${GREEN}‚úîÔ∏è Removido com sucesso: $command${RESET}\n"

       fi


        
    done < "$conf_fullpath"


# ‚úÖ Significado do -n:

# Com a flag -n, impede que o adb shell leia qualquer entrada do teclado (stdin) enquanto 
# o comando roda.

# Isso pode ser √∫til em scripts, onde voc√™ quer evitar que o shell fique aguardando entrada 
# do usu√°rio.

# ----------------------------------------------------------------------------------------

    local conf_path="/etc/debloated_Samsung/samsung.conf"
    local conf_fullpath="${conf_path}"
    local command


    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."

    echo -e "${GREEN}\n+++++++++++++++ Limpeza de Apps legados da Samsung e de operadoras \n ${RESET}"
    
    sleep 1s


    # Tratar arquivos de configura√ß√£o com coment√°rios.

    while read -r command; do
    

        # Ignorar linhas vazias e coment√°rios nos arquivos .conf
        
        # [[ "$command" =~ ^#.*$ || -z "$command" ]] && continue

        [[ -z "$command" || "$command" =~ ^# ]] && continue
        
         
        echo -e "${GREEN}\nDesinstalando: $command \n ${RESET}"
        
        echo -e "${GREEN}\n[ADB] Executando: adb shell -n pm uninstall --user 0 $command \n ${RESET}"
        

       # Tratamento de erro para capturar a sa√≠da do comando e verificar se houve falha 
       # (por exemplo, porque o pacote n√£o existe no dispositivo).

       output=$(adb shell -n pm uninstall --user 0 "$command" 2>&1)

       if [[ "$output" == *"Failure"* ]]; then

            echo -e "\n${RED}‚ùå Falha ao remover: $command - Motivo: $output${RESET}\n"

       else

            echo -e "\n${GREEN}‚úîÔ∏è Removido com sucesso: $command${RESET}\n"

       fi

        
    done < "$conf_fullpath"  

# ----------------------------------------------------------------------------------------


    echo -e "${GREEN}\nLimpeza B√°sica finalizada com √™xito.  \n ${RESET}"

    echo -e "\n${GREEN}‚úîÔ∏è Remo√ß√£o conclu√≠da. Reinicie o aparelho para finalizar. ${RESET} \n"

    sleep 5

}


# https://github.com/invinciblevenom/debloat_samsung_android/blob/main/debloat/Basic_debloat.bat

# ----------------------------------------------------------------------------------------

# Limpeza Moderada

function LIGHT() {

    local conf_path="/etc/debloated_Samsung/light.conf"
    local conf_fullpath="${conf_path}"
    local command

    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."

    echo -e "${YELLOW}\nIniciando remo√ß√£o de bloatware pr√©-instalado...\n${RESET}"

    echo -e "${GREEN}\n+++++++++++++++ Limpeza Moderada \n ${RESET}"
    
    sleep 1s
    
    while read -r command; do
    

        # Ignorar linhas vazias e coment√°rios nos arquivos .conf

        [[ -z "$command" || "$command" =~ ^# ]] && continue

      
        echo -e "${GREEN}\n[ADB] Executando: adb shell -n pm uninstall --user 0 $command \n ${RESET}"
        

       # Tratamento de erro para capturar a sa√≠da do comando e verificar se houve falha 
       # (por exemplo, porque o pacote n√£o existe no dispositivo).

       output=$(adb shell -n pm uninstall --user 0 "$command" 2>&1)

       if [[ "$output" == *"Failure"* ]]; then

            echo -e "\n${RED}‚ùå Falha ao remover: $command - Motivo: $output${RESET}\n"

       else

            echo -e "\n${GREEN}‚úîÔ∏è Removido com sucesso: $command${RESET}\n"

       fi

        
    done < "$conf_fullpath"


    echo -e "${GREEN}\nLimpeza Moderada finalizada com √™xito. \n ${RESET}"

    echo -e "\n${GREEN}‚úîÔ∏è Remo√ß√£o conclu√≠da. Reinicie o aparelho para finalizar. ${RESET} \n"

    sleep 5

}


# https://github.com/invinciblevenom/debloat_samsung_android/blob/main/debloat/Light_debloat.bat


# ----------------------------------------------------------------------------------------

# Limpeza Pesada

function HEAVY() {

    local conf_path="/etc/debloated_Samsung/heavy.conf"
    local conf_fullpath="${conf_path}"
    local command

    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."

# ----------------------------------------------------------------------------------------

# Confirmar antes de "HEAVY"

clear

echo -e "\n\n"

read -r -p "Voc√™ tem certeza que quer aplicar a limpeza pesada? [a√ß√£o √© irrevers√≠vel] (s/N): " confirm

[[ "$confirm" =~ ^[sS]$ ]] || { clear && exit 1 ; }


# ----------------------------------------------------------------------------------------

    echo -e "${YELLOW}\nIniciando remo√ß√£o de bloatware pr√©-instalado...\n${RESET}"

    echo -e "${YELLOW}\n+++ Iniciando Limpeza Pesada +++ \n${RESET}"
    
    # echo -e "${GREEN}\n+++++++++++++++ Limpeza Pesada \n ${RESET}"
    
    sleep 1s

    
    while read -r command; do


        # Ignorar linhas vazias e coment√°rios nos arquivos .conf
                
        # [[ "$command" =~ ^#.*$ || -z "$command" ]] && continue

        [[ -z "$command" || "$command" =~ ^# ]] && continue

              
        echo -e "\n${GREEN}[ADB] Executando: adb shell -n pm uninstall --user 0 $command ${RESET}\n"
        

       # Tratamento de erro para capturar a sa√≠da do comando e verificar se houve falha 
       # (por exemplo, porque o pacote n√£o existe no dispositivo).

       output=$(adb shell -n pm uninstall --user 0 "$command" 2>&1)

       if [[ "$output" == *"Failure"* ]]; then

            echo -e "\n${RED}‚ùå Falha ao remover: $command - Motivo: $output${RESET}\n"

       else

            echo -e "\n${GREEN}‚úîÔ∏è Removido com sucesso: $command${RESET}\n"

       fi

        
    done < "$conf_fullpath"


# ----------------------------------------------------------------------------------------

    echo -e "${GREEN}\n[ADB] Executando: adb shell cmd package install-existing com.sec.android.soagent \n ${RESET}"

# Este comando reativa um app do sistema j√° instalado, chamado:

# com.sec.android.soagent ‚Äì Este √© o Samsung Update Service Agent. Ele √© respons√°vel por 
# comunica√ß√£o com os servidores da Samsung para atualiza√ß√µes, diagn√≥sticos ou notifica√ß√µes 
# do sistema.
    
    adb shell cmd package install-existing com.sec.android.soagent


    echo -e "${GREEN}\n[ADB] Executando: adb shell cmd package install-existing com.sec.android.systemupdate \n ${RESET}"

# Este comando reativa o:

# com.sec.android.systemupdate ‚Äì Trata-se do servi√ßo de atualiza√ß√£o de sistema da Samsung, 
# que gerencia a verifica√ß√£o e instala√ß√£o de atualiza√ß√µes OTA (Over-the-Air) do Android.

    adb shell cmd package install-existing com.sec.android.systemupdate



# ‚öôÔ∏è O que significa install-existing?

# A op√ß√£o install-existing n√£o instala um APK novo, ela reativa (ou torna vis√≠vel novamente) 
# um app do sistema que foi desativado para o usu√°rio, geralmente via:

# ADB (pm uninstall --user 0)

# Apps de gerenciamento de bloatware

# Configura√ß√µes de desativa√ß√£o do Android


# Se voc√™ tinha desativado esses apps e rodou esses comandos, eles voltar√£o a funcionar 
# normalmente.

# ----------------------------------------------------------------------------------------



echo "
# O erro  /system/bin/sh: cmd: not found ‚Äî significa que o bin√°rio cmd n√£o est√° dispon√≠vel 
# no shell do Android 5.0 (Lollipop). Esse bin√°rio (cmd) foi introduzido a partir do 
# Android 6.0 (Marshmallow), portanto n√£o existe no Android 5.

# /system/bin/sh: cmd: not found

" 

    echo -e "\n${GREEN}Limpeza pesada finalizada com √™xito.${RESET}\n"

    echo -e "\n${GREEN}‚úîÔ∏è Remo√ß√£o conclu√≠da. Reinicie o aparelho para finalizar. ${RESET} \n"

    sleep 5

}


# https://github.com/invinciblevenom/debloat_samsung_android/blob/main/debloat/Heavy_debloat.bat


# ----------------------------------------------------------------------------------------

# Restaurar pacotes desinstalados com --user 0


function restore_package() {


# üß™ Verificando se o pacote existe no sistema:

# Antes de restaurar, voc√™ pode verificar se ele ainda est√° presente (mas desinstalado 
# para o usu√°rio):

# adb shell pm list packages -s | grep chrome

# Se retornar algo como:

# package:com.android.chrome

# Significa que ele ainda est√° presente na parti√ß√£o de sistema e pode ser restaurado.



# Para restaurar o Chrome (reinstalar para o usu√°rio atual ap√≥s ter sido removido com 
# pm uninstall --user 0), basta usar o comando:

# ‚úÖ Comando ADB para restaurar o Chrome:

# adb shell cmd package install-existing com.android.chrome


# üìå Observa√ß√µes:
# 
#   Isso s√≥ funciona se o app ainda estiver presente no sistema (desinstalado apenas com 
#   --user 0, n√£o removido do /system ou /product).
# 
#   O comando install-existing n√£o reinstala da Play Store; ele apenas reativa o app do 
# sistema.


# ‚ùå Se o app foi removido via root (ex: Magisk, TWRP ou adb root + rm)
# 
# A√≠ ser√° necess√°rio reinstalar via .apk manualmente:
# 
# adb install chrome.apk


# Instalar o Google Chrome em um dispositivo Android abaixo da vers√£o 6 (Marshmallow) tem 
# limita√ß√µes importantes, j√° que o Chrome moderno n√£o oferece mais suporte a essas vers√µes 
# antigas.

# Mas ainda √© poss√≠vel instalar vers√µes antigas do Chrome manualmente via APK.


# ‚úÖ Como instalar o Chrome em Android abaixo de 6 (ex: Android 5.1)


# üîß Requisitos:

#     ADB instalado em seu PC.

#     Depura√ß√£o USB ativada no celular.

#     Dispositivo reconhecido com adb devices.

#     APK do Chrome compat√≠vel com a vers√£o do Android.


# Google Chrome 49.0.2623.91 (arm-v7a) (Android 5.0+)

# https://www.apkmirror.com/apk/google-inc/chrome/chrome-49-0-2623-91-release/


# ‚ö†Ô∏è Importante: Baixe sempre a variante correta (arm/arm64/x86) conforme seu dispositivo.


# üì• 2. Instalar via ADB

# Depois de baixar, renomeie para algo f√°cil, como chrome.apk.


# Execute no terminal:

# adb install chrome.apk


# Se j√° tiver uma vers√£o do Chrome instalada (inativa), use:

# adb install -r chrome.apk


    clear


# M√©todo

        echo -e "\n${RED}

# Instalar um APK manualmente

Se o App estiver realmente desinstalado ou corrompido, a alternativa mais vi√°vel sem 
root √©:

     Baixe o APK compat√≠vel com a vers√£o do Android. - https://www.apkmirror.com/

     Transfira para o celular.

     Ative \"Fontes desconhecidas\".

     Instale o app manualmente.


‚ö†Ô∏è  Mas aten√ß√£o:

    Diferente da Play Store, voc√™ assume o risco ao instalar manualmente.

    Voc√™ precisa ativar \"Fontes desconhecidas\", o que abre uma porta tempor√°ria de seguran√ßa.

    Pode instalar uma vers√£o incompat√≠vel se n√£o escolher o APK certo para sua arquitetura (ex: $(adb shell getprop ro.product.cpu.abi       | tr -d '\r')).

${RESET} \n"





    echo -e "${GREEN}\n=== Restaurar aplicativo removido (usu√°rio 0) ===${RESET}"


    # Nome do pacote que voc√™ quer instalar/restaurar

    read -rp $'\nDigite o nome do pacote a restaurar (ex: com.android.chrome): ' pacote

    [[ -z "$pacote" ]] && DIE "Nenhum pacote informado."

    echo -e "\n${YELLOW}Restaurando pacote: $pacote ...${RESET}"


# Detectar vers√£o do Android

ANDROID_VERSION=$(adb shell getprop ro.build.version.release)

echo "Vers√£o do Android detectada: $ANDROID_VERSION"


# Fun√ß√£o para comparar vers√µes

version_ge() {

  [ "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1" ]

}


# Tenta usar o comando correto conforme a vers√£o

if version_ge "$ANDROID_VERSION" "7.0"; then


    echo -e "${GREEN}\n[ADB] Executando: adb shell cmd package install-existing $pacote ...\n ${RESET}"

    adb shell cmd package install-existing "$pacote"

    # cmd package install-existing "$pacote"

    if [[ $? -eq 0 ]]; then

        echo -e "\n${GREEN}‚úîÔ∏è Pacote $pacote restaurado com sucesso.${RESET} \n"

    else

        echo -e "\n${RED}‚ùå Falha ao restaurar o pacote $pacote.${RESET} \n"

    fi

elif version_ge "$ANDROID_VERSION" "6.0"; then


    echo -e "${GREEN}\n[ADB] Executando: adb shell pm install-existing $pacote ...\n ${RESET}"

    adb shell pm install-existing "$pacote"

    # pm install-existing "$pacote"

    if [[ $? -eq 0 ]]; then

        echo -e "\n${GREEN}‚úîÔ∏è Pacote $pacote restaurado com sucesso.${RESET} \n"

    else

        echo -e "\n${RED}‚ùå Falha ao restaurar o pacote $pacote.${RESET} \n"

    fi

else

    echo "Android < 6.0 detectado. Usando 'pm enable'..."

    echo -e "\nVerificar se o App ainda est√° no sistema: \n"

    adb shell pm list packages | grep "$pacote"



    echo -e "${GREEN}\n[ADB] Executando: adb shell pm enable $pacote ...\n ${RESET}"

    adb shell pm enable "$pacote"

    # Vers√£o do Android:	5.1.1

    # Error: java.lang.SecurityException: Permission Denial: attempt to change component state from pid=17105, uid=2000, package uid=10063


    # adb shell su -c 'pm enable '$pacote''

    # pm enable "$pacote"

    if [[ $? -eq 0 ]]; then

        echo -e "\n${GREEN}‚úîÔ∏è Pacote $pacote restaurado com sucesso.${RESET} \n"

    else

        echo -e "\n${RED}‚ùå Falha ao restaurar o pacote $pacote.${RESET} \n"

    fi



fi


    # /system/bin/sh: cmd: not found


    echo -e "\n${YELLOW}Dica:${RESET} use \`adb shell pm list packages\` para listar todos os pacotes dispon√≠veis no sistema. \n"


    sleep 10

}


# ----------------------------------------------------------------------------------------


# Para remove jogos ou algo que j√° foram detectados como v√≠rus, adware, spyware, ou 
# trojans em an√°lises de seguran√ßa.


function jogos() {


        clear

        
        echo -e "\n${RED}‚ùå Jogos considerados potencialmente perigosos ou maliciosos, que j√° foram detectados como 
v√≠rus, adware, spyware, ou trojans em an√°lises de seguran√ßa. 

‚ùó Alguns desses apps foram removidos da Play Store, mas podem ainda estar circulando 
via APKs ou lojas alternativas.

Alguns podem at√© usar √≠cones e nomes gen√©ricos, dificultando a identifica√ß√£o.

Voc√™ tamb√©m pode instalar apps confi√°veis de seguran√ßa como:

    Malwarebytes
    Panda Antivirus

Evite baixar APKs de terceiros (sites n√£o oficiais), pois esses podem conter v√≠rus.

${RESET} \n"



        sleep 10



# ----------------------------------------------------------------------------------------


    local conf_path="/etc/debloated_Samsung/jogos.conf"
    local conf_fullpath="${conf_path}"
    local command

    # Verificando se o arquivo "$conf_fullpath" existe
    
    [[ -e "$conf_fullpath" ]] ||
        DIE "O arquivo de configura√ß√£o $conf_fullpath n√£o foi encontrado."


    echo -e "${YELLOW}\nIniciando remo√ß√£o de bloatware pr√©-instalado...\n${RESET}"

    echo -e "${YELLOW}\n+++ Iniciando Limpeza de jogos +++ \n${RESET}"
    
    # echo -e "${GREEN}\n+++++++++++++++ Limpeza de jogos \n ${RESET}"
    
    sleep 1s

    
    while read -r command; do


        # Ignorar linhas vazias e coment√°rios nos arquivos .conf
                
        # [[ "$command" =~ ^#.*$ || -z "$command" ]] && continue

        [[ -z "$command" || "$command" =~ ^# ]] && continue

              
        echo -e "\n${GREEN}[ADB] Executando: adb shell -n pm uninstall --user 0 $command ${RESET}\n"
        

       # Tratamento de erro para capturar a sa√≠da do comando e verificar se houve falha 
       # (por exemplo, porque o pacote n√£o existe no dispositivo).

       output=$(adb shell -n pm uninstall --user 0 "$command" 2>&1)

       if [[ "$output" == *"Failure"* ]]; then

            echo -e "\n${RED}‚ùå Falha ao remover: $command - Motivo: $output${RESET}\n"

       else

            echo -e "\n${GREEN}‚úîÔ∏è Removido com sucesso: $command${RESET}\n"

       fi

        
    done < "$conf_fullpath"


# ----------------------------------------------------------------------------------------


    echo -e "\n${GREEN}‚úîÔ∏è Remo√ß√£o conclu√≠da. Reinicie o aparelho para finalizar. ${RESET} \n"

    sleep 5

}




# ----------------------------------------------------------------------------------------

# Para bloquear an√∫ncios e rastreadores no Android


# Configurar o AdGuard DNS em um dispositivo Android via ADB


# Mas com algumas limita√ß√µes dependendo da vers√£o do Android e do tipo de DNS que voc√™ 
# quer configurar (DNS-over-HTTPS, DNS-over-TLS ou DNS simples).


# ‚úÖ Requisitos

#    Android 9 ou superior (para DNS-over-TLS nativo)

#    ADB configurado e dispositivo com Depura√ß√£o USB ativada

#    O dispositivo n√£o pode ter um perfil de trabalho (Work Profile) ativo para esse tipo 
#    de altera√ß√£o

#    O dispositivo n√£o pode usar um DNS personalizado por outro app (como o pr√≥prio AdGuard 
#    ou Intra)


function configurar_adguard_dns() {



# Verifica se o ADB est√° instalado.

# Conecta ao dispositivo via ADB.

# Verifica a vers√£o do Android.

# Se for Android 9 (API 28) ou superior, aplica o AdGuard DNS via DNS-over-TLS.

# Caso contr√°rio, exibe uma mensagem de incompatibilidade.



# Configura√ß√£o


# ‚úÖ dns.adguard.com ‚Äì AdGuard DNS Padr√£o

#     Bloqueia:

#         An√∫ncios (ads)

#         Rastreadores (trackers)

#         Dom√≠nios maliciosos

#     N√£o bloqueia conte√∫do adulto

#     Ideal para usu√°rios em geral que s√≥ querem uma navega√ß√£o mais limpa e segura

# üü¢ Indicado para:

#     Privacidade

#     Navega√ß√£o sem an√∫ncios

#     Seguran√ßa b√°sica na web

# üîí family.adguard.com ‚Äì AdGuard DNS com Prote√ß√£o Familiar

#     Bloqueia:

#         Tudo o que o DNS padr√£o bloqueia (ads, trackers, malware)

#         Conte√∫do adulto/pornogr√°fico

#         Dom√≠nios com conte√∫do expl√≠cito ou impr√≥prio para crian√ßas

#     Tamb√©m tem filtro de busca segura (SafeSearch) for√ßado em mecanismos como Google, Bing, etc.

#     Ideal para fam√≠lias, crian√ßas e ambientes escolares

# üü† Indicado para:

#     Pais que querem proteger filhos

#     Escolas, empresas ou ambientes com restri√ß√£o de conte√∫do adulto


# DNS_HOSTNAME="dns.adguard.com"  # ou "family.adguard.com" para vers√£o com filtro
# DNS_HOSTNAME="family.adguard.com"


# ADB=$(which adb)

# Verifica se o ADB est√° instalado

# if [ -z "$ADB" ]; then
#     echo "ADB n√£o encontrado. Instale o Android Platform Tools."
#     exit 1
# fi

# Verifica se o dispositivo est√° conectado

# DEVICE=$(adb devices | sed -n '2p' | awk '{print $1}')

# if [ -z "$DEVICE" ]; then

#     echo "Nenhum dispositivo ADB conectado."

#     exit 1
# fi

# echo -e "\nüì± Dispositivo conectado: $DEVICE \n"


# Obt√©m a vers√£o do Android (SDK)

# üì¶ ro.build.version.sdk (Android SDK version)

# Esse valor representa a vers√£o da API (Application Programming Interface) do Android, 
# tamb√©m chamada de API level. √â um n√∫mero inteiro usado pelo sistema para indicar com qual 
# vers√£o do Android um app ou recurso √© compat√≠vel.

ANDROID_VERSION=$(adb shell getprop ro.build.version.sdk | tr -d '\r')


# üß† Por que usar o SDK version no script?

#     Muitos recursos (como o DNS-over-TLS) n√£o est√£o dispon√≠veis em todas as vers√µes do 
#     Android.

#     Verificar a SDK version (API level) √© a maneira mais confi√°vel e t√©cnica de saber se 
#     o dispositivo suporta um recurso.


if [ -z "$ANDROID_VERSION" ]; then

    echo -e "\n${RED}‚ùå N√£o foi poss√≠vel obter a vers√£o do Android. ${RESET}\n"

    sleep 1

    exit 1
fi

echo -e "\nüì¶ Android SDK version: $ANDROID_VERSION \n"



# Verifica compatibilidade com DNS-over-TLS (API >= 28)

if [ "$ANDROID_VERSION" -lt 28 ]; then


    echo -e "\n${RED}‚ùå Android vers√£o $ANDROID_VERSION n√£o √© compat√≠vel com DNS-over-TLS.\n\n√â necess√°rio Android 9 (API 28) ou superior. ${RESET}\n"

    sleep 5

    exit 1

fi


# Menu interativo


echo -e "\n\nQual DNS do AdGuard deseja configurar? \n"

echo "1) AdGuard padr√£o (dns.adguard.com)"
echo -e "2) AdGuard Family Protection (family.adguard.com) \n"

echo -n "Escolha uma op√ß√£o [1-2]: "
read OPCAO

case "$OPCAO" in
    1)
        DNS_HOSTNAME="dns.adguard.com"
        ;;

    2)
        DNS_HOSTNAME="family.adguard.com"
        ;;

    *)
        echo "‚ùå Op√ß√£o inv√°lida."

        sleep 1

        exit 1

        ;;
esac


echo -e "\n${GREEN}üîß Aplicando configura√ß√£o com DNS: $DNS_HOSTNAME...${RESET}\n"

# Aplica as configura√ß√µes via ADB

adb shell settings put global private_dns_mode hostname
adb shell settings put global private_dns_specifier "$DNS_HOSTNAME"


# Reinicia Wi-Fi para for√ßar aplica√ß√£o

echo -e "\n${GREEN}üì° Reiniciando Wi-Fi...${RESET}\n"

adb shell svc wifi disable

sleep 2

adb shell svc wifi enable

sleep 1



# ‚úÖ Verifica√ß√£o

# Voc√™ pode verificar se o DNS foi aplicado corretamente:

adb shell settings get global private_dns_mode
adb shell settings get global private_dns_specifier


echo -e "\n${GREEN}‚úÖ DNS do AdGuard configurado com sucesso!${RESET}\n"


}



# https://plus.diolinux.com.br/t/como-bloquear-anuncios-e-rastreadores-no-android/59712

# ----------------------------------------------------------------------------------------

# Para encerra o script corretamente.


function sair() {

        clear

        echo -e "\n${RED}‚ùå Matando o servidor adb... ${RESET} \n"

        # Este comando encerra o servidor ADB (Android Debug Bridge) que est√° em execu√ß√£o.

        adb kill-server

        sleep 1

        clear

        exit 0

}

# ----------------------------------------------------------------------------------------

########## Main



while true; do

clear



cat <<EOF


‚ñó‚ñÑ‚ñÑ‚ñÑ  ‚ñó‚ñû‚ñÄ‚ñö‚ññ‚ñó‚ññ   ‚ñà  ‚ñÑ‚ñÑ‚ñÑ  ‚ñó‚ñû‚ñÄ‚ñú‚ñå   ‚ñ†  ‚ñó‚ñû‚ñÄ‚ñö‚ññ   ‚ñê‚ñå     ‚ñó‚ñÑ‚ñÑ‚ññ‚ñó‚ñû‚ñÄ‚ñú‚ñå‚ñÑ‚ñÑ‚ñÑ‚ñÑ   ‚ñÑ‚ñÑ‚ñÑ ‚ñà  ‚ñê‚ñå‚ñÑ‚ñÑ‚ñÑ‚ñÑ
‚ñê‚ñå  ‚ñà ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò‚ñê‚ñå   ‚ñà ‚ñà   ‚ñà ‚ñù‚ñö‚ñÑ‚ñü‚ñå‚ñó‚ñÑ‚ñü‚ñô‚ñÑ‚ññ‚ñê‚ñõ‚ñÄ‚ñÄ‚ñò   ‚ñê‚ñå    ‚ñê‚ñå   ‚ñù‚ñö‚ñÑ‚ñü‚ñå‚ñà ‚ñà ‚ñà ‚ñÄ‚ñÑ‚ñÑ  ‚ñÄ‚ñÑ‚ñÑ‚ñû‚ñò‚ñà   ‚ñà
‚ñê‚ñå  ‚ñà ‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñê‚ñõ‚ñÄ‚ñö‚ññ‚ñà ‚ñÄ‚ñÑ‚ñÑ‚ñÑ‚ñÄ        ‚ñê‚ñå  ‚ñù‚ñö‚ñÑ‚ñÑ‚ññ‚ñó‚ñû‚ñÄ‚ñú‚ñå     ‚ñù‚ñÄ‚ñö‚ññ     ‚ñà   ‚ñà ‚ñÑ‚ñÑ‚ñÑ‚ñÄ      ‚ñà   ‚ñà
‚ñê‚ñô‚ñÑ‚ñÑ‚ñÄ      ‚ñê‚ñô‚ñÑ‚ñû‚ñò‚ñà              ‚ñê‚ñå       ‚ñù‚ñö‚ñÑ‚ñü‚ñå    ‚ñó‚ñÑ‚ñÑ‚ñû‚ñò                         ‚ñó‚ñÑ‚ññ
                               ‚ñê‚ñå                                             ‚ñê‚ñå ‚ñê‚ñå
 V: 1.2                                                                        ‚ñù‚ñÄ‚ñú‚ñå
                                                                              ‚ñê‚ñô‚ñÑ‚ñû‚ñò

 1) - Ajustes Iniciais  - Configurar o AdGuard DNS e outras coisas.
 2) - Limpeza B√°sica    - Conta Samsung/Samsung Health/Galaxy AI se mant√©m.
 3) - Limpeza moderada  - Para usu√°rios sem uma conta Samsung.
 4) - Limpeza Pesada    - !!! Otimiza√ß√£o m√°xima do sistema !!! / remove jogos
 5) - Restaurar pacote
 6) - Listar os pacotes instalados
 0) - Sair
EOF

read -r -p $'\n Escolha [0-6]: ' menu

case $menu in

    1) TWEAKS 
       configurar_adguard_dns
       ;;

    2) BASIC ;;

    3) LIGHT ;;

    4) 
      HEAVY
      jogos
     ;;

    5) restore_package ;;

    6) 
      # Para listar todos os pacotes instalados:

      lista ;;

    0) sair ;;

    [a-zA-Z]) echo -e "${RED}\nSomente n√∫meros. \n ${RESET}"; sleep 1 ; sair ;;

    *)        echo -e "${RED}\nOp√ß√£o Inv√°lida.  \n ${RESET}"; sleep 1 ; sair ;;

esac


done


# ----------------------------------------------------------------------------------------


exit 0

